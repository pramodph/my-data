package ThreadPoolExecutor;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

public class ThreadPoolExecutor {

	public static void main(String[] args) {
		java.util.concurrent.ThreadPoolExecutor executor=new java.util.concurrent.ThreadPoolExecutor(2, 5, 1, TimeUnit.SECONDS, new ArrayBlockingQueue<Runnable>(2), 
				new CustomThreadFactory(), new CustomRejectedHandler());
		
		for(int i=0;i<12;i++) {
			executor.submit(()->{
					try {
						Thread.sleep(5000);
						System.out.println("Task completed by:"+Thread.currentThread().getName());
					}catch(InterruptedException e) {
						e.printStackTrace();
					}
			});
		}
		
		executor.shutdown();
	}

}

class CustomThreadFactory implements ThreadFactory{

	@Override
	public Thread newThread(Runnable r) {
		Thread t=new Thread(r);
		return t;
	}	
}

class CustomRejectedHandler implements RejectedExecutionHandler{

	@Override
	public void rejectedExecution(Runnable r, java.util.concurrent.ThreadPoolExecutor executor) {
		System.out.println("Task denied:"+ r.toString());
	}
	
}