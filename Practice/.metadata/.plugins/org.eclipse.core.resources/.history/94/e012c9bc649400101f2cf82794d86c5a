package ThreadPoolExecutor;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class SubmitFlavors {

	public static void main(String[] args) {
		java.util.concurrent.ThreadPoolExecutor poolExecutor=new java.util.concurrent.ThreadPoolExecutor(3,3,1,TimeUnit.HOURS,new ArrayBlockingQueue<>(10),
				Executors.defaultThreadFactory(),new java.util.concurrent.ThreadPoolExecutor.AbortPolicy());
		
		
		//use case1
		Future<?> futureObj=poolExecutor.submit(()->{
			System.out.println("task1 with Runnable");
		});
		
		try {
			Object object = futureObj.get();
			System.out.println(object ==null);
		}catch(Exception e){
		}

		System.out.println("Use case 02:");
		
		//Use case 2
		List<Integer> output=new ArrayList<>();
		Future<List<Integer>> futureObj2=poolExecutor.submit(()->{
			output.add(100);
		}, output);
		
		try {
			List<Integer> outputFutureObj2=futureObj2.get();
			System.out.println(outputFutureObj2.get(0));
		}catch(Exception e) {
			
		}
		
		//use case 3
		Future<List<Integer>> futureObj3=poolExecutor.submit(()->{
			System.out.println("Task 3 with callable");
			List<Integer> listObj=new ArrayList<>();
			listObj.add(200);
		});
	}

}
