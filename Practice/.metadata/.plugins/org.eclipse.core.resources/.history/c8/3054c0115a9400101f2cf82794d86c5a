package ThreadPoolExecutor;

import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.Executors;
import java.util.concurrent.RejectedExecutionHandler;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

public class ThreadPoolExecutor {

	public ThreadPoolExecutor(int i, int j, int k, TimeUnit hours, ArrayBlockingQueue arrayBlockingQueue,
			CustomThreadFactory customThreadFactory, CustomRejectedHandler customRejectedHandler) {
		// TODO Auto-generated constructor stub
	}

	public static void main(String[] args) {
		
	ThreadPoolExecutor poolExecutor=new ThreadPoolExecutor(2,5,1,
			TimeUnit.HOURS,
			new ArrayBlockingQueue<>(10),
			new CustomThreadFactory(),
			new CustomRejectedHandler());
	
	
	for(int i=0;i<25;i++) {
		poolExecutor.submit(()->{
		try {
			Thread.sleep(5000);
			
		}catch(Exception e) {
			
		}
		});
		poolExecutor.
	}
	}

}

class CustomThreadFactory implements ThreadFactory{

	@Override
	public Thread newThread(Runnable r) {
		Thread t=new Thread();
		return t;
	}	
}

class CustomRejectedHandler implements RejectedExecutionHandler{

	@Override
	public void rejectedExecution(Runnable r, java.util.concurrent.ThreadPoolExecutor executor) {
		System.out.println("Task denied:"+ r.toString());
	}
	
}